version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2281
    networks:
      - kafka-network
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2281"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
  db-bid:
    container_name: sto-bid-db
    image: postgres:latest
    environment:
      POSTGRES_USER: bid_user
      POSTGRES_PASSWORD: bid_pass
      PGDATA: /data/postgres
      POSTGRES_DB: sto-bid-db
    volumes:
      - db-bid:/data/postgres
    ports:
      - "6532:5432"
    networks:
      - db-bid
    restart: unless-stopped
  bid-service:
    build:
      context: .
      dockerfile: /bid/Dockerfile
    container_name: bid-service
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://db-bid:5432/sto-bid-db
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    volumes:
      - ./logs/bid-service:/logs
    ports:
      - "8089:8089"
    depends_on:
      - db-bid
      - kafka
    networks:
      - db-bid
      - kafka-network
  db-check:
    container_name: sto-check-db
    image: postgres:latest
    environment:
      POSTGRES_USER: check_user
      POSTGRES_PASSWORD: check_pass
      PGDATA: /data/postgres
      POSTGRES_DB: sto-check-db
    volumes:
      - db-check:/data/postgres
    ports:
      - "6632:5432"
    networks:
      - db-check
    restart: unless-stopped
  check-service:
    build:
      context: .
      dockerfile: /check/Dockerfile
    container_name: check-service
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://db-check:5432/sto-check-db
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    volumes:
      - ./logs/check-service:/logs
    ports:
      - "8090:8090"
    depends_on:
      - db-check
      - kafka
    networks:
      - db-check
      - kafka-network
  db-repair:
    container_name: sto-repair-db
    image: postgres:latest
    environment:
      POSTGRES_USER: repair_user
      POSTGRES_PASSWORD: repair_pass
      PGDATA: /data/postgres
      POSTGRES_DB: sto-repair-db
    volumes:
      - db-repair:/data/postgres
    ports:
      - "5532:5432"
    networks:
      - db-repair
    restart: unless-stopped
  activemq:
    image: rmohr/activemq:latest
    container_name: activemq
    ports:
      - "1615:61616"
      - "8161:8161"
    environment:
      - ACTIVEMQ_ADMIN_LOGIN=admin
      - ACTIVEMQ_ADMIN_PASSWORD=admin
    volumes:
      - activemq-data:/var/lib/activemq
      - ./repair/activemq.xml:/opt/activemq/conf/activemq.xml
      - ./repair/activemq-core.xsd:/opt/activemq/conf/activemq-core.xsd
    networks:
      - activemq-network
  repair-service:
    build:
      context: .
      dockerfile: /repair/Dockerfile
    container_name: repair-service
    environment:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://db-repair:5432/sto-repair-db
      SPRING_ACTIVEMQ_BROKER-URL: tcp://activemq:61616
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    volumes:
      - ./logs/repair-service:/logs
    ports:
      - "8091:8091"
    depends_on:
      - db-repair
      - activemq
      - kafka
    networks:
      - db-repair
      - activemq-network
      - kafka-network

networks:
  kafka-network:
    driver: bridge
  db-bid:
    driver: bridge
  db-check:
    driver: bridge
  db-repair:
    driver: bridge
  activemq-network:

volumes:
  db-bid:
  db-check:
  db-repair:
  activemq-data:
